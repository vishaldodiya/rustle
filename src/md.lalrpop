grammar;

pub MarkDown: String = {
    // Heading 1.
    <h1:H1><t:Text> => {
        let mut temp = String::from("<h1>");
        temp.push_str(t);
        temp.push_str("</h1>");

        return temp;
    },
    // Heading 2.
    <h2:H2><t:Text> => {
        let mut temp = String::from("<h2>");
        temp.push_str(t);
        temp.push_str("</h2>");

        return temp;
    },
    // Heading 3.
    <h3:H3><t:Text> => {
        let mut temp = String::from("<h3>");
        temp.push_str(t);
        temp.push_str("</h3>");

        return temp;
    },
    // Heading 4.
    <h4:H4><t:Text> => {
        let mut temp = String::from("<h4>");
        temp.push_str(t);
        temp.push_str("</h4>");

        return temp;
    },
    // Heading 5.
    <h5:H5><t:Text> => {
        let mut temp = String::from("<h5>");
        temp.push_str(t);
        temp.push_str("</h5>");

        return temp;
    },
    // Heading 6.
    <h6:H6><t:Text> => {
        let mut temp = String::from("<h6>");
        temp.push_str(t);
        temp.push_str("</h6>");

        return temp;
    },
    // Text.
    <t:Text> => {
        let mut temp = String::from("<p>");
        temp.push_str(t);
        temp.push_str("</p>");

        return temp;
    },
    // Bold.
    <t1:Text?> "**" <s:Text> "**" <t2:Text?> => {
        let mut temp = String::from("");

        match t1 {
            Some(t) => {
                temp.push_str("<p>");
                temp.push_str(t);
            },
            None => {
                match t2 {
                    Some(t) => temp.push_str("<p>"),
                    None => temp.push_str("")
                }
            }
        }

        temp.push_str("<strong>");
        temp.push_str(s);
        temp.push_str("</strong>");

        match t2 {
            Some(t) => {
                temp.push_str(t);
                temp.push_str("</p>");
            }
            None => {
                match t1 {
                    Some(t) => temp.push_str("</p>"),
                    None => temp.push_str("")
                }
            }
        }

        return temp;
    },
    // Italic.
    <t1:Text?> "*" <i:Text> "*" <t2:Text?> => {
        let mut temp = String::from("");

        match t1 {
            Some(t) => {
                temp.push_str("<p>");
                temp.push_str(t);
            },
            None => {
                match t2 {
                    Some(t) => temp.push_str("<p>"),
                    None => temp.push_str("")
                }
            }
        }

        temp.push_str("<em>");
        temp.push_str(i);
        temp.push_str("</em>");

        match t2 {
            Some(t) => {
                temp.push_str(t);
                temp.push_str("</p>");
            }
            None => {
                match t1 {
                    Some(t) => temp.push_str("</p>"),
                    None => temp.push_str("")
                }
            }
        }

        return temp;
    },
    // Strong - Italic.
    <t1:Text?> "***" <si:Text> "***" <t2:Text?> => {
        let mut temp = String::from("");

        match t1 {
            Some(t) => {
                temp.push_str("<p>");
                temp.push_str(t);
            },
            None => {
                match t2 {
                    Some(t) => temp.push_str("<p>"),
                    None => temp.push_str("")
                }
            }
        }

        temp.push_str("<strong><em>");
        temp.push_str(si);
        temp.push_str("</em></strong>");

        match t2 {
            Some(t) => {
                temp.push_str(t);
                temp.push_str("</p>");
            }
            None => {
                match t1 {
                    Some(t) => temp.push_str("</p>"),
                    None => temp.push_str("")
                }
            }
        }

        return temp;
    }
};

H1: &'input str = <s:r"# "> => s;
H2: &'input str = <s:r"#{2} "> => s;
H3: &'input str = <s:r"#{3} "> => s;
H4: &'input str = <s:r"#{4} "> => s;
H5: &'input str = <s:r"#{5} "> => s;
H6: &'input str = <s:r"#{6} "> => s;
Text: &'input str = <s:r"[\w ]+"> => s;